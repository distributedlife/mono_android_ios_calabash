import groovy.io.FileType

def deletePath(path) {
  def dir = new File(path)
  dir.deleteDir()
 }

task clean() << {
  def paths_to_clean = ["${projectDir}/bin", "${projectDir}/obj", "test_servers"]

  paths_to_clean.each {
    deletePath(it)
  }
}

def findFileByRegexInPath(regex, path) {
  def dir = new File(path)
  def file = ""

  dir.traverse(type:FileType.FILES, nameFilter: regex) {
    file = it
  }
  
  if (!file) {
    Exception("No file with regex: ${regex} found")
  }

  file
}

def runBlocked(command) {
  run(command, true)
}

def runAsync(command) {
  run(command, false)
}

def run(command, block) {
  def sout = new StringBuffer()
  def serr = new StringBuffer()
  def proc = command.execute()
  proc.consumeProcessOutput(sout, serr)

  if (block) {
    proc.waitFor()
  }

  if (sout) { println sout}
  if (serr) { println serr}
}

task buildAndSignTestPackage(dependsOn: clean) << {
  def projectFile = findFileByRegexInPath(~/.*.csproj/, "${projectDir}")
  def command = "xbuild /t:SignAndroidPackage /p:Configuration=Debug ${projectFile}"

  runBlocked(command)
}

task runCalabashTests() << {
  def apk = findFileByRegexInPath(~/.*Signed.apk/, "${projectDir}/bin")
  def command = "calabash-android run $apk"

  runBlocked(command)
}

task ensureServerStarted << {
  def command = "adb start-server"

  runBlocked(command)
}

task startEmulator(dependsOn: "ensureServerStarted") << {
  def command = "emulator -avd hardware_intel"
  runAsync(command)
}

task waitForEmulatorToStart() << {
  def emulatorIsReady = "package:/system/framework/framework-res.apk"
  def command = "adb shell pm path android"

  def started = false
  while (!started) {
    def sout = new StringBuffer()
    def serr = new StringBuffer()
    def proc = command.execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()

    if (sout.toString().trim() == emulatorIsReady) {
      started = true
    } else {
      sleep(1000)
    }
  }
}

task shutdownEmulator << {
  def command = "adb emu kill"
  runBlocked(command)
}

task doFullBuild {
  doFirst {
    tasks.startEmulator.execute()
    tasks.clean.execute()
    tasks.buildAndSignTestPackage.execute()
    tasks.waitForEmulatorToStart.execute()
    tasks.runCalabashTests.execute()
  }

  doLast {
    tasks.shutdownEmulator.execute()
  }
}
